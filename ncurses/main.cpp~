/**
 Linux (POSIX) implementation of _kbhit().
 Morgan McGuire, morgan@cs.brown.edu
 */
#include<iostream>
#include <stdio.h>
#include <sys/select.h>
#include <termios.h>
#include <stropts.h>
#include <sys/ioctl.h>


int _kbhit() {
    static const int STDIN = 0;
    static bool initialized = false;

    if (! initialized) {
        // Use termios to turn off line buffering
        termios term;
        tcgetattr(STDIN, &term);
        term.c_lflag &= ~ICANON;
        tcsetattr(STDIN, TCSANOW, &term);
        setbuf(stdin, NULL);
        initialized = true;
    }

    int bytesWaiting;
    ioctl(STDIN, FIONREAD, &bytesWaiting);
    return bytesWaiting;
}

//////////////////////////////////////////////
//    Simple demo of _kbhit()

#include <unistd.h>

int getch()
{
  int r;
  unsigned char c;
  if ((r = read(0, &c, sizeof(c))) < 0) {
    return r;
  } else {
    return c;
  }
}

int main() {
  printf("Press any key");
  while (!_kbhit()) {
    printf(".");
    fflush(stdout);
    usleep(1000);
  }
  printf("\nDone.\n");
 
  std::cout << "#######"<<std::endl;
  /*
  int n;
  while(ioctl(0, I_NREAD, &n) == 0 && n > 0){
    int c = getchar();
    std::cout << c << std::endl;
  }
  */
  fseek (stdin, 0, SEEK_END);
  auto num = ftell (stdin);
  std::cout << num << std::endl;

  std::cout << "#######"<<std::endl;

  return 0;
} 
