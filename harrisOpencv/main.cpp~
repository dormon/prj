#include<iostream>
#include<sstream>
#include<functional>
#include<map>
#include<vector>
#include<typeinfo>

#define ___ std::cerr << __PRETTY_FUNCTION__ << std::endl

template<typename TYPE>
class Expresion{
};

class ResourceBase{
  public:
    ResourceBase(){}
    ResourceBase(ResourceBase const&other){init(other.size);}
    void init(size_t const&sizeInBytes){size = sizeInBytes;}
    ResourceBase(size_t const&sizeInBytes){init(sizeInBytes);}
    virtual ~ResourceBase(){}
  protected:
    size_t size = 0;
};

template<typename TYPE>
class Resource: public ResourceBase{
  public:
    using type = TYPE;
    Resource():ResourceBase(sizeof(TYPE)){}
    Resource(TYPE const&d):Resource(){
      constructor = [&](void*ptr){new(ptr)TYPE(d);};
      destructor  = [&](void*ptr){reinterpret_cast<TYPE*>(ptr)->~TYPE();};
    }
    Resource(Resource<TYPE>const&o):Resource(){
      constructor = [&](void*ptr){new(ptr)TYPE(static_cast<TYPE>(o));};
      destructor  = [&](void*ptr){reinterpret_cast<TYPE*>(ptr)->~TYPE();};
    }
    template<typename OTHERTYPE>
    Expresion<decltype(std::declval<TYPE>()+std::declval<OTHERTYPE>())> operator+(Resource<OTHERTYPE>const&other)const{
    }
    ~Resource(){}
  protected:
    std::function<void(void*)>constructor = nullptr;
    std::function<void(void*)>destructor  = nullptr;
};

class FunctionBase{
  public:
    using FunctionPointer = void(*)();
    FunctionBase(FunctionPointer const&f):fce(f){}
  protected:
    FunctionPointer fce = nullptr;
};

template<typename T>struct is_resource              : std::false_type{};
template<typename T>struct is_resource<Resource<T>> : std::true_type {};

template<typename RET,typename...ARGS>
class Function:public FunctionBase{
  public:
    using FunctionType = RET(*)(ARGS...);
    Function(FunctionType const&fce):FunctionBase(reinterpret_cast<FunctionPointer>(fce)){}
    template<typename...ARGSS>
      void operator()(ARGSS const&...args){
        storeInputs(args...);
      }
    void storeInputs(){}
    template<typename HEAD,typename...TAIL>
      void storeInputs(HEAD const&h,TAIL const&...tail){
        storeInput(h);
        storeInputs(tail...);
      }
    template<typename T,typename std::enable_if<!is_resource<T>::value,char>::type = 0>
      void storeInput(T const&t){
        inputs.push_back(new Resource<T>(t));
      }
    template<typename T,typename std::enable_if< is_resource<T>::value,char>::type = 0>
      void storeInput(T const&t){
        inputs.push_back(new T(t));
      }
    ~Function(){for(auto const&x:inputs)delete x;}
  protected:
    std::vector<ResourceBase*>inputs;
 };

template<typename RET,typename...ARGS>
Function<RET,ARGS...> func(RET(*f)(ARGS...)){return Function<RET,ARGS...>(f);}

float add(float a,float b){return a+b;}


template<typename FCE>struct FceArgType;
template<typename OUTPUT,typename... ARGS>
struct FceArgType<OUTPUT(ARGS...)>{
  using type = std::tuple<ARGS...>;
};

template<typename FCE>struct FceReturnType;
template<typename OUTPUT,typename... ARGS>
struct FceReturnType<OUTPUT(ARGS...)>{
  using type = OUTPUT;
};



template<typename FCE>struct MemFceArgType;
template<typename OUTPUT,typename CLASS,typename... ARGS>
struct MemFceArgType<OUTPUT(CLASS::*)(ARGS...)>{
  using type = std::tuple<ARGS...>;
};
template<typename OUTPUT,typename CLASS,typename... ARGS>
struct MemFceArgType<OUTPUT(CLASS::*)(ARGS...)const>{
  using type = std::tuple<ARGS...>;
};

template<typename FCE>struct MemFceClassType;
template<typename OUTPUT,typename CLASS,typename...ARGS>
struct MemFceClassType<OUTPUT(CLASS::*)(ARGS...)>{
  using type = CLASS;
};
template<typename OUTPUT,typename CLASS,typename...ARGS>
struct MemFceClassType<OUTPUT(CLASS::*)(ARGS...)const>{
  using type = CLASS;
};

template<typename FCE>struct MemFceReturnType;
template<typename OUTPUT,typename CLASS,typename...ARGS>
struct MemFceReturnType<OUTPUT(CLASS::*)(ARGS...)>{
  using type = OUTPUT;
};
template<typename OUTPUT,typename CLASS,typename...ARGS>
struct MemFceReturnType<OUTPUT(CLASS::*)(ARGS...)const>{
  using type = OUTPUT;
};

class CommandInput{
};

class Command{
  public:
     
};

int main(){
  float b{1.f};
  static_cast<void>(b);
  Resource<float>a{1.f};
  return 0;
}
