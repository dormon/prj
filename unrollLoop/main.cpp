#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <cstdint>
#include <stdlib.h>
#include <iostream>
#include <fstream>
#include <chrono>
#include <functional>
#include <cstdlib>
#include <memory>

#define CALL_IF_IN_RANGE(MIN,MAX,VALUE,fce) if(VALUE>=MIN&&VALUE<=MAX)fce(VALUE)

/*
 if(1   >=MIN&&1   <=MAX)fce(1   )
 if(2   >=MIN&&2   <=MAX)fce(2   )
 if(4   >=MIN&&4   <=MAX)fce(4   )
 if(8   >=MIN&&8   <=MAX)fce(8   )
 if(16  >=MIN&&16  <=MAX)fce(16  )
 if(32  >=MIN&&32  <=MAX)fce(32  )
 if(64  >=MIN&&64  <=MAX)fce(64  )
 if(128 >=MIN&&128 <=MAX)fce(128 )
 if(256 >=MIN&&256 <=MAX)fce(256 )
 if(512 >=MIN&&512 <=MAX)fce(512 )
 if(1024>=MIN&&1024<=MAX)fce(1024)
 if(2048>=MIN&&2048<=MAX)fce(2048)
 if(4096>=MIN&&4096<=MAX)fce(4096)
 if(8192>=MIN&&8192<=MAX)fce(8192)
*/

//1
//12
//124
//1248
//

#define POWER2LOOP0001(VALUE,MIN,MAX,FCE,...) if(VALUE>=MIN&&VALUE<=MAX){FCE(VALUE,__VA_ARGS__);}                               
#define POWER2LOOP0002(VALUE,MIN,MAX,FCE,...) POWER2LOOP0001(VALUE,MIN,MAX,FCE,__VA_ARGS__) POWER2LOOP0001(VALUE*2,MIN,MAX,FCE,__VA_ARGS__)  
#define POWER2LOOP0004(VALUE,MIN,MAX,FCE,...) POWER2LOOP0001(VALUE,MIN,MAX,FCE,__VA_ARGS__) POWER2LOOP0002(VALUE*2,MIN,MAX,FCE,__VA_ARGS__)  
#define POWER2LOOP0008(VALUE,MIN,MAX,FCE,...) POWER2LOOP0001(VALUE,MIN,MAX,FCE,__VA_ARGS__) POWER2LOOP0004(VALUE*2,MIN,MAX,FCE,__VA_ARGS__)  
#define POWER2LOOP0016(VALUE,MIN,MAX,FCE,...) POWER2LOOP0001(VALUE,MIN,MAX,FCE,__VA_ARGS__) POWER2LOOP0008(VALUE*2,MIN,MAX,FCE,__VA_ARGS__)  
#define POWER2LOOP0032(VALUE,MIN,MAX,FCE,...) POWER2LOOP0001(VALUE,MIN,MAX,FCE,__VA_ARGS__) POWER2LOOP0016(VALUE*2,MIN,MAX,FCE,__VA_ARGS__)  
#define POWER2LOOP0064(VALUE,MIN,MAX,FCE,...) POWER2LOOP0001(VALUE,MIN,MAX,FCE,__VA_ARGS__) POWER2LOOP0032(VALUE*2,MIN,MAX,FCE,__VA_ARGS__)  
#define POWER2LOOP0128(VALUE,MIN,MAX,FCE,...) POWER2LOOP0001(VALUE,MIN,MAX,FCE,__VA_ARGS__) POWER2LOOP0064(VALUE*2,MIN,MAX,FCE,__VA_ARGS__)  
#define POWER2LOOP0256(VALUE,MIN,MAX,FCE,...) POWER2LOOP0001(VALUE,MIN,MAX,FCE,__VA_ARGS__) POWER2LOOP0128(VALUE*2,MIN,MAX,FCE,__VA_ARGS__)  
#define POWER2LOOP0512(VALUE,MIN,MAX,FCE,...) POWER2LOOP0001(VALUE,MIN,MAX,FCE,__VA_ARGS__) POWER2LOOP0256(VALUE*2,MIN,MAX,FCE,__VA_ARGS__)  
#define POWER2LOOP1024(VALUE,MIN,MAX,FCE,...) POWER2LOOP0001(VALUE,MIN,MAX,FCE,__VA_ARGS__) POWER2LOOP0512(VALUE*2,MIN,MAX,FCE,__VA_ARGS__)  
#define POWER2LOOP2048(VALUE,MIN,MAX,FCE,...) POWER2LOOP0001(VALUE,MIN,MAX,FCE,__VA_ARGS__) POWER2LOOP1024(VALUE*2,MIN,MAX,FCE,__VA_ARGS__)  
#define POWER2LOOP4096(VALUE,MIN,MAX,FCE,...) POWER2LOOP0001(VALUE,MIN,MAX,FCE,__VA_ARGS__) POWER2LOOP2048(VALUE*2,MIN,MAX,FCE,__VA_ARGS__)  
#define POWER2LOOP8192(VALUE,MIN,MAX,FCE,...) POWER2LOOP0001(VALUE,MIN,MAX,FCE,__VA_ARGS__) POWER2LOOP4096(VALUE*2,MIN,MAX,FCE,__VA_ARGS__)  

#define FORLOOP0001(VALUE,MIN,MAX,FCE,...) if(VALUE>=MIN&&VALUE<=MAX){FCE(VALUE,__VA_ARGS__);} 
#define FORLOOP0002(VALUE,MIN,MAX,FCE,...) FORLOOP0001(VALUE,MIN,MAX,FCE,__VA_ARGS__) FORLOOP0001(VALUE+1   ,MIN,MAX,FCE,__VA_ARGS__) 
#define FORLOOP0004(VALUE,MIN,MAX,FCE,...) FORLOOP0002(VALUE,MIN,MAX,FCE,__VA_ARGS__) FORLOOP0002(VALUE+2   ,MIN,MAX,FCE,__VA_ARGS__) 
#define FORLOOP0008(VALUE,MIN,MAX,FCE,...) FORLOOP0004(VALUE,MIN,MAX,FCE,__VA_ARGS__) FORLOOP0004(VALUE+4   ,MIN,MAX,FCE,__VA_ARGS__) 
#define FORLOOP0016(VALUE,MIN,MAX,FCE,...) FORLOOP0008(VALUE,MIN,MAX,FCE,__VA_ARGS__) FORLOOP0008(VALUE+8   ,MIN,MAX,FCE,__VA_ARGS__) 
#define FORLOOP0032(VALUE,MIN,MAX,FCE,...) FORLOOP0016(VALUE,MIN,MAX,FCE,__VA_ARGS__) FORLOOP0016(VALUE+16  ,MIN,MAX,FCE,__VA_ARGS__) 
#define FORLOOP0064(VALUE,MIN,MAX,FCE,...) FORLOOP0032(VALUE,MIN,MAX,FCE,__VA_ARGS__) FORLOOP0032(VALUE+32  ,MIN,MAX,FCE,__VA_ARGS__) 
#define FORLOOP0128(VALUE,MIN,MAX,FCE,...) FORLOOP0064(VALUE,MIN,MAX,FCE,__VA_ARGS__) FORLOOP0064(VALUE+64  ,MIN,MAX,FCE,__VA_ARGS__) 
#define FORLOOP0256(VALUE,MIN,MAX,FCE,...) FORLOOP0128(VALUE,MIN,MAX,FCE,__VA_ARGS__) FORLOOP0128(VALUE+128 ,MIN,MAX,FCE,__VA_ARGS__) 
#define FORLOOP0512(VALUE,MIN,MAX,FCE,...) FORLOOP0256(VALUE,MIN,MAX,FCE,__VA_ARGS__) FORLOOP0256(VALUE+256 ,MIN,MAX,FCE,__VA_ARGS__) 
#define FORLOOP1024(VALUE,MIN,MAX,FCE,...) FORLOOP0512(VALUE,MIN,MAX,FCE,__VA_ARGS__) FORLOOP0512(VALUE+512 ,MIN,MAX,FCE,__VA_ARGS__) 
#define FORLOOP2048(VALUE,MIN,MAX,FCE,...) FORLOOP1024(VALUE,MIN,MAX,FCE,__VA_ARGS__) FORLOOP1024(VALUE+1024,MIN,MAX,FCE,__VA_ARGS__) 
#define FORLOOP4096(VALUE,MIN,MAX,FCE,...) FORLOOP2048(VALUE,MIN,MAX,FCE,__VA_ARGS__) FORLOOP2048(VALUE+2048,MIN,MAX,FCE,__VA_ARGS__) 
#define FORLOOP8192(VALUE,MIN,MAX,FCE,...) FORLOOP4096(VALUE,MIN,MAX,FCE,__VA_ARGS__) FORLOOP4096(VALUE+4096,MIN,MAX,FCE,__VA_ARGS__) 

#define FOR(offset,N,fce,...) COPY8192(offset,N,fce,...)

void print(size_t o,size_t){
  std::cerr << "offset: " << o << std::endl;
}

void hi(size_t i){
  std::cerr << "hi" << std::endl;
}

#define PRINT(o,...) std::cerr<<o<<std::endl;

#define FORLOOPSINK(V,MIN,FCE,...) FORLOOP8192(0,MIN,V,FCE,__VA_ARGS__)

int main(int,char*[]) {
  //COPY4096(0,3,print);

  //FORLOOP(0,1,print,0);
  //POWER2LOOP(1,16,print,0);
  
  POWER2LOOP8192(1,1,32,PRINT)
  //POWER2LOOP8192(1,1,8,FORLOOPSINK,0,PRINT,0)
  //P2L2(1,2,FORLOOPSINK,1,0,print,0)
  return 0;

}
